#lang racket
(define (square a) (* a a))

(define (average x y)
        (/ (+ x y) 2))

(define (improve guess x)
        (average guess (/ x guess)))

(define (good-enough? guess x)
        (< (abs (- (square guess) x))
           0.001))

(define (new-if predicate then-clause else-clause)
  (cond (predicate then-clause)
  (else else-clause)))

(define (sqrt-iter guess x)
        (if (good-enough? guess x)
        guess
        (sqrt-iter (improve guess x)
        x)))


(define (good-enough-new? guess x)
        (< (abs (- guess x)) 
           0.00000001))

(define (sqrt-iter-new old-guess guess x)
  (if (good-enough-new? old-guess guess)
      guess
      (sqrt-iter-new guess
                 (improve guess x)
                 x)))

(sqrt-iter 1.0 0.00001)

(sqrt-iter-new 1.0 0.01 0.00001)

